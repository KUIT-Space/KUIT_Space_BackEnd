# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Space-Spring 배포 자동화

# 아래의 브랜치에 해당 트리거 발생할 경우 자동 배포
on:
  push:
    branches:
      - "main"
      - "develop"
      - "deploy"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "deploy"

# 코드가 변경되면 실행할 작업들
jobs:

  # build
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      # 1. jdk 버전 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. GitHub secrets 로부터 데이터 받아 workflow에 파일 생성
      - name : Make application-dev.yml
        run: |         
          cd ./src/main/resources    
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML_DEV }}" >> ./application.yml
        shell: bash

      # 3. project에 맞는 gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # 4. gradle build
      - name: gradle에 실행권한 부여
        run: chmod +x ./gradlew

      # 5. build
      - name: build with gradle wrapper (프로젝트 빌드)
        run: ./gradlew build


  # docker build & deploy
  build-and-deploy-docker:
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.ref == 'refs/heads/main' || 
      github.base_ref == 'deploy'|| 
      github.ref == 'refs/heads/deploy' || 
      startsWith(github.head_ref, 'chore/') ||
      startsWith(github.head_ref, 'set')
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # 6. docker build & push
      - name: docker build & push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_PASSWORD_DEV }}          
          docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev .
          docker push ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev

      # 7. docker deploy to ec2
      - name: docker deploy to ec2
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.EC2_USERNAME_DEV }}
          #password: ${{ secrets.EC2_PASSWORD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_DEV }}
          port: 22
          envs: COMPOSE
          script: |
            sudo docker rm -f $(docker ps -aq)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev
            sudo docker-compose -f $COMPOSE up -d
            sudo docker image prune -f
