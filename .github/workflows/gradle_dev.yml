# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - "main"
      - "develop"
      - "deploy"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "deploy"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      # gradlew 권한 추가
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

  build-docker-image:
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' || 
      github.base_ref == 'deploy'|| 
      github.ref == 'refs/heads/deploy' || 
      startsWith(github.head_ref, 'chore/') ||
      startsWith(github.head_ref, 'set')
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      # Spring boot 애플리케이션 빌드
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          arguments: clean bootJar

      # Docker 이미지 빌드
      # 이미지 파일명이 feed-dev (마지막 . 포함해야함 현위치라는 뜻)
      - name: docker image build
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev .

      # Docker 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_DEV }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_DEV }}

      # Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev

  # 이미지 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      ## deploy to develop
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.EC2_USERNAME_DEV }}
          #password: ${{ secrets.EC2_PASSWORD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_DEV }}
          port: 22
          envs: GITHUB_SHA
          script: |
            echo "${{ secrets.APPLICATION_YML_DEV }}" > ~/application_dev.yml            
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev
            sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
            sudo docker run -d -p 8080:8080 -v ~/application_dev.yml:src/main/resources/application.yml ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev
#            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME_DEV }}/feed-dev
            sudo docker image prune -f